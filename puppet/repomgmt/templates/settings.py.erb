# Django settings for www project.

DEBUG = True
TEMPLATE_DEBUG = DEBUG 

ADMINS = (
    ('<%= admin_name %>', '<%= admin_email %>'),
)

MANAGERS = ADMINS

DATABASES = {
    'default': {
<% if @simple %>
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': '/home/<%= user %>/buildd.sqlite',
<% else %>
        'ENGINE': 'django.db.backends.mysql',
        'NAME': '<%= dbname %>',
        'USER': '<%= dbuser %>',
        'PASSWORD': '<%= dbpass %>',
        'HOST': '<%= dbhost %>',
        'PORT': '<%= dbport %>',                      # Set to empty string for default. Not used with sqlite3.
<% end %>
    }
}

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# In a Windows environment this must be set to your system time zone.
TIME_ZONE = 'UTC'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-us'

SITE_ID = 1

# If you set this to False, Django will make some optimizations so as not
# to load the internationalization machinery.
USE_I18N = True

# If you set this to False, Django will not format dates, numbers and
# calendars according to the current locale.
USE_L10N = True

# If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = True

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = ''

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = '/home/<%= user %>/www/static'

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (   
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

# List of finder classes that know how to find static files in
# various locations.   
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Make this unique, and don't share it with anybody.
SECRET_KEY = '<%= secret_key %>'

# List of callables that know how to import templates from various sources.
TEMPLATE_LOADERS = (   
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)

MIDDLEWARE_CLASSES = ( 
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # Uncomment the next line for simple clickjacking protection:
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
)

ROOT_URLCONF = '<%= project_name %>.urls'

# Python dotted path to the WSGI application used by Django's runserver.
WSGI_APPLICATION = '<%= project_name %>.wsgi.application'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    # Uncomment the next line to enable the admin:
    # 'django.contrib.admin',
    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',
    'djcelery',
    'registration',
    'tastypie',
    'repomgmt',
    'south'
)

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters': {
        'verbose': {
            'format': '%(asctime)s %(levelname)s %(module)s %(process)d %(thread)d %(message)s'
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'logfile': {
            'level': 'INFO',
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': '/home/<%= user %>/repomgmt.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'repomgmt': {
            'handlers': ['logfile'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}

# repomgmt settings
TESTING=False

LOGIN_REDIRECT_URL = '/users/me/'

 
AUTHENTICATION_BACKENDS = ('django.contrib.auth.backends.ModelBackend',
                           'repomgmt.auth.MyAuthBackend')


<% if @simple %>

<% if @use_ec2_metadata_service %>
import urllib
floating_ip = urllib.urlopen('http://169.254.169.254/2009-04-04/meta-data/public-ipv4').read()
fixed_ip = urllib.urlopen('http://169.254.169.254/2009-04-04/meta-data/local-ipv4').read()
<% else %>
floating_ip = "<%= ftp_ip %>"
fixed_ip = floating_ip
<% end %>

 
FTP_IP = fixed_ip
FTP_BASE_PATH = "/incoming"
BASE_URL = "http://%s:8000" % (floating_ip,)
APT_REPO_BASE_URL = "http://%s/repos/" % (floating_ip,)
BASE_TARBALL_URL = 'http://%s/tbdownload/' % (floating_ip,)
BASE_BUILD_LOG_URL = 'http://%s/buildlogs/' % (floating_ip,)

<% else %>

FTP_IP = "<%= ftp_ip %>"
FTP_BASE_PATH = "/incoming"
BASE_URL = "http://<%= hostname %>:<%= port %>"
APT_REPO_BASE_URL = "%s/repos/" % (BASE_URL,)
BASE_TARBALL_URL = '%s/tbdownload/' % (BASE_URL,)
BASE_BUILD_LOG_URL = '%s/buildlogs/' % (BASE_URL,)

<% end %>

import os.path
BASE_INCOMING_DIR = '/srv/ftp/incoming'
TARBALL_DIR = os.path.join(os.environ['HOME'], 'tarballs')
GIT_CACHE_DIR = os.path.join(os.environ['HOME'], 'gitcache')
BASE_REPO_DIR = os.path.join(os.environ['HOME'], 'repos')
BASE_PUBLIC_REPO_DIR = os.path.join(os.environ['HOME'], 'public')
BUILD_LOG_DIR = os.path.join(os.environ['HOME'], 'buildlogs')
SRC_PKG_BUILD_FAILURE_LOG_DIR = os.path.join(os.environ['HOME'], 'srcpkgbuildlogs')

USE_FLOATING_IPS = True

<% if @post_mk_sbuild_customisation %>
POST_MK_SBUILD_CUSTOMISATION = <%= post_mk_sbuild_customisation %>
<% end %>

# Enable Celery
import djcelery
djcelery.setup_loader()
CELERYBEAT_SCHEDULER = "djcelery.schedulers.DatabaseScheduler"
